
lab2pt2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009c2  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080e  00000000  00000000  00000b92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a7  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001648  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003de  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000213  00000000  00000000  00001a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001c6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	21 c0       	rjmp	.+66     	; 0xde <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:



int main(void)
{
 DDRA=0x00;	PORTA=0xFF;
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
 DDRC=0xFF;	PORTB=0x00;
  a4:	87 b9       	out	0x07, r24	; 7
  a6:	15 b8       	out	0x05, r1	; 5
 unsigned char fuel=0x00;
 unsigned char led=0x00;
  
    while (1) 
    {
		fuel=PINA;
  a8:	80 b1       	in	r24, 0x00	; 0
 */ 

#include <avr/io.h>
// bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b){
	return ( b ? x |(0x01 <<k) : x & ~ (0x01 << k));}
  aa:	8f 70       	andi	r24, 0x0F	; 15
    {
		fuel=PINA;
		for(unsigned char i=4; i<=7; i++){fuel = SetBit(fuel, i, 0);}
		
		led=0x00;
		if(fuel>=1){led=SetBit(led,5,1);}
  ac:	49 f0       	breq	.+18     	; 0xc0 <main+0x22>
		if(fuel>=3){led=SetBit(led,4,1);}
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	10 f0       	brcs	.+4      	; 0xb6 <main+0x18>
  b2:	90 e3       	ldi	r25, 0x30	; 48
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <main+0x1a>
    {
		fuel=PINA;
		for(unsigned char i=4; i<=7; i++){fuel = SetBit(fuel, i, 0);}
		
		led=0x00;
		if(fuel>=1){led=SetBit(led,5,1);}
  b6:	90 e2       	ldi	r25, 0x20	; 32
		if(fuel>=3){led=SetBit(led,4,1);}
		if(fuel>=5){led=SetBit(led,3,1);}
  b8:	85 30       	cpi	r24, 0x05	; 5
  ba:	18 f0       	brcs	.+6      	; 0xc2 <main+0x24>
 */ 

#include <avr/io.h>
// bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b){
	return ( b ? x |(0x01 <<k) : x & ~ (0x01 << k));}
  bc:	98 60       	ori	r25, 0x08	; 8
  be:	01 c0       	rjmp	.+2      	; 0xc2 <main+0x24>
    while (1) 
    {
		fuel=PINA;
		for(unsigned char i=4; i<=7; i++){fuel = SetBit(fuel, i, 0);}
		
		led=0x00;
  c0:	90 e0       	ldi	r25, 0x00	; 0
		if(fuel>=1){led=SetBit(led,5,1);}
		if(fuel>=3){led=SetBit(led,4,1);}
		if(fuel>=5){led=SetBit(led,3,1);}
		if(fuel>=7){led=SetBit(led,2,1);}
  c2:	87 30       	cpi	r24, 0x07	; 7
  c4:	08 f0       	brcs	.+2      	; 0xc8 <main+0x2a>
 */ 

#include <avr/io.h>
// bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b){
	return ( b ? x |(0x01 <<k) : x & ~ (0x01 << k));}
  c6:	94 60       	ori	r25, 0x04	; 4
		led=0x00;
		if(fuel>=1){led=SetBit(led,5,1);}
		if(fuel>=3){led=SetBit(led,4,1);}
		if(fuel>=5){led=SetBit(led,3,1);}
		if(fuel>=7){led=SetBit(led,2,1);}
		if(fuel>=10){led=SetBit(led,1,1);}
  c8:	8a 30       	cpi	r24, 0x0A	; 10
  ca:	08 f0       	brcs	.+2      	; 0xce <main+0x30>
 */ 

#include <avr/io.h>
// bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b){
	return ( b ? x |(0x01 <<k) : x & ~ (0x01 << k));}
  cc:	92 60       	ori	r25, 0x02	; 2
		if(fuel>=1){led=SetBit(led,5,1);}
		if(fuel>=3){led=SetBit(led,4,1);}
		if(fuel>=5){led=SetBit(led,3,1);}
		if(fuel>=7){led=SetBit(led,2,1);}
		if(fuel>=10){led=SetBit(led,1,1);}
		if(fuel>=13){led=SetBit(led,0,1);}	
  ce:	8d 30       	cpi	r24, 0x0D	; 13
  d0:	08 f0       	brcs	.+2      	; 0xd4 <main+0x36>
 */ 

#include <avr/io.h>
// bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b){
	return ( b ? x |(0x01 <<k) : x & ~ (0x01 << k));}
  d2:	91 60       	ori	r25, 0x01	; 1
		if(fuel>=3){led=SetBit(led,4,1);}
		if(fuel>=5){led=SetBit(led,3,1);}
		if(fuel>=7){led=SetBit(led,2,1);}
		if(fuel>=10){led=SetBit(led,1,1);}
		if(fuel>=13){led=SetBit(led,0,1);}	
		if(fuel<=4){led=SetBit(led,6,1);}
  d4:	85 30       	cpi	r24, 0x05	; 5
  d6:	08 f4       	brcc	.+2      	; 0xda <main+0x3c>
 */ 

#include <avr/io.h>
// bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b){
	return ( b ? x |(0x01 <<k) : x & ~ (0x01 << k));}
  d8:	90 64       	ori	r25, 0x40	; 64
		if(fuel>=7){led=SetBit(led,2,1);}
		if(fuel>=10){led=SetBit(led,1,1);}
		if(fuel>=13){led=SetBit(led,0,1);}	
		if(fuel<=4){led=SetBit(led,6,1);}
		
		PORTC=led;		
  da:	98 b9       	out	0x08, r25	; 8
    }
  dc:	e5 cf       	rjmp	.-54     	; 0xa8 <main+0xa>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
